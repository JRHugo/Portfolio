import time
import random
import matplotlib.pyplot as plt

# Inicializamos variables
perdida = 1.0
epoca = 1
max_epocas = 50
perdidas_historial = []  # Lista para almacenar la p√©rdida de cada √©poca
perdida_anterior = perdida
aumentos_consecutivos = 0  # Contador para detectar aumentos seguidos

plt.ion()  # Activamos el modo interactivo para visualizar en tiempo real

while perdida > 0.1 and epoca <= max_epocas:
    print("Epoca: " + str(epoca) + " - P√©rdida: " + str(perdida))   
    # Guardamos la p√©rdida en el historial
    perdidas_historial.append(perdida)
    
    # Reducimos la p√©rdida en un porcentaje aleatorio entre 5% y 15%
    nueva_perdida = perdida - (perdida * random.uniform(0.05, 0.15))

    # TODO: Detectar si la p√©rdida aumenta en dos √©pocas consecutivas
    if nueva_perdida > perdida:
        aumentos_consecutivos += 1
        if aumentos_consecutivos == 2:
            print("üö® ¬°La p√©rdida aument√≥ dos veces seguidas! Deteniendo entrenamiento...")
            break
    else:
        aumentos_consecutivos = 0  # Reiniciamos el contador si no hay aumento

    perdida = nueva_perdida  # Actualizamos la p√©rdida
    epoca += 1  # Pasamos a la siguiente √©poca

    if epoca % 10 == 0:
        print("üíæ Checkpoint guardado.")

    # TODO: Generar y actualizar la gr√°fica en tiempo real
    plt.clf()  # Limpiar gr√°fico anterior
    plt.plot(perdidas_historial, label="P√©rdida")
    plt.xlabel("√âpoca")
    plt.ylabel("P√©rdida")
    plt.title("Monitoreo de P√©rdida en Entrenamiento")
    plt.legend()
    plt.pause(0.1)  # Peque√±a pausa para actualizar la gr√°fica

    time.sleep(0.3)  # Simula tiempo de procesamiento

plt.ioff()  # Desactivamos el modo interactivo
plt.show()  # Mostramos el gr√°fico final

if perdida <= 0.1:
    print("‚úÖ Entrenamiento finalizado. P√©rdida aceptable alcanzada.")
else:
    print("‚ùå Entrenamiento detenido.")
