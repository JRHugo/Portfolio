import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# ğŸ”¹ Datos reales (tamaÃ±o en mÂ² y precio de casas en $)
X = np.array([50, 80, 100, 150, 200, 250, 300, 400, 500]).reshape(-1, 1)
y = np.array([150000, 240000, 300000, 450000, 600000, 750000, 900000, 1200000, 1500000])

# ğŸ”¹ Creamos el modelo de regresiÃ³n
modelo = LinearRegression()

# ğŸ”¹ Guardaremos la pÃ©rdida en cada iteraciÃ³n
perdidas_historial = []

# ğŸ”¹ Entrenamos el modelo en mÃºltiples iteraciones (simulaciÃ³n de epochs)
for epoca in range(1, 21):  # 20 Ã©pocas
    modelo.fit(X, y)  # Entrenamos el modelo con los datos
    y_pred = modelo.predict(X)  # Hacemos predicciones
    perdida = mean_squared_error(y, y_pred)  # Calculamos la pÃ©rdida (error cuadrÃ¡tico medio)

    perdidas_historial.append(perdida)  # Guardamos la pÃ©rdida
    print("Epoca: " + str(epoca) + ", PÃ©rdida: " + str(perdida))  # Mostramos la pÃ©rdida

    # ğŸ”¹ Graficamos la pÃ©rdida en tiempo real
    plt.clf()
    plt.plot(perdidas_historial, marker="o", linestyle="-", color="blue", label="PÃ©rdida")
    plt.xlabel("Ã‰poca")
    plt.ylabel("PÃ©rdida (Error cuadrÃ¡tico medio)")
    plt.title("EvoluciÃ³n de la PÃ©rdida durante el Entrenamiento")
    plt.legend()
    plt.pause(0.3)  # PequeÃ±a pausa para actualizar la grÃ¡fica

plt.show()  # Mostramos la grÃ¡fica final

print("âœ… Entrenamiento finalizado.")
